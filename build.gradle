buildscript {
    repositories {
        mavenCentral()
    }
}
plugins{
    id "java"
    id 'maven-publish'
}
apply plugin: 'application'
apply plugin: 'distribution'


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.mongodb:mongodb-driver-sync:4.9.1'
    implementation 'org.graalvm.js:js:22.3.2'
    implementation 'org.graalvm.js:js-scriptengine:22.3.2'
    implementation 'org.graalvm.truffle:truffle-api:22.3.2'
    implementation 'com.google.code.gson:gson:2.10.1'
    testImplementation 'junit:junit:4.13.2'
    //implementation "org.graalvm.sdk:graal-sdk:22.0.0.2"
    //implementation "org.graalvm.truffle:truffle-api:22.0.0.2"
}


compileJava{
    sourceCompatibility = '11'
    targetCompatibility = '11'
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
    }
}

jar {
    archiveName ="mongojdbc${version}.jar"
    manifest {
        attributes 'Main-Class': 'com.wisecoders.dbschema.mongodb.JdbcDriver'
        attributes 'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        attributes 'Specification-Version': "$version"
        attributes 'Specification-Vendor': "Wise Coders"
        attributes 'Implementation-Vendor-Id': "dbschema.com"
        attributes 'Implementation-Vendor': "Wise Coders"
        attributes 'Implementation-Version': new Date().format( 'yyMMdd' )
    }
}

java {
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.wisecoders.dbschema'
            artifactId = 'mongodb-jdbc-driver'
            version = '1.0.0'

            from components.java
        }
    }
}


task zip(type: Zip, dependsOn:['clean','jar']) {
    archiveFileName.set 'MongoDbJdbcDriver.zip'
    from configurations.runtimeClasspath.allArtifacts.files
    from configurations.runtimeClasspath
    from "build/libs" include "*.jar"
}

task tar(type: Tar, dependsOn:['clean','jar']) {
    archiveFileName.set 'MongoDbJdbcDriver.tar'
    from configurations.runtimeClasspath.allArtifacts.files
    from configurations.runtimeClasspath
    from "build/libs" include "*.jar"
}

task copyInUserHome(type: Copy,dependsOn:['clean','jar']) {
    from configurations.runtimeClasspath.allArtifacts.files
    from configurations.runtimeClasspath
    from "build/libs" include "*.jar"
    into "${System.getProperty('user.home')}/.DbSchema/drivers/MongoDb/"
}


/*
remotes {
    webServer {
        host = websiteHost
        user = websiteUser
        password = websitePassword
    }
}
task uploadWeb {
    doLast {
        ssh.settings {
            knownHosts = allowAnyHosts
            fileTransfer = 'scp'
        }
        ssh.run {
            session(remotes.webServer) {
                fileTree("$buildDir/distributions").visit { FileVisitDetails details ->
                    println "Copy $details.file.path ..."
                    put from: "$details.file.path", into: 'web/jdbc-drivers'
                }
            }
        }
    }
}
*/
/* EXTRACT COMPLETION KEYWORDS. THIS SHOULD PRINT ON SCREEN SOME TEXT
def listMethodNames = { clz ->
                def result = []
                clz.metaClass.methods.each { method ->
                  if ( method.isPublic() && ( !'equals'.equals(method.name) && !'notify'.equals(method.name) && !'notifyAll'.equals(method.name) && !'wait'.equals(method.name) && !'hashCode'.equals(method.name) )){
                    StringBuilder sbParams = new StringBuilder()
                    for( Class paramType : method.nativeParameterTypes ){
                      if ( sbParams.length() > 0 ) sbParams.append(", ")
                      if ( 'Map'.equals(paramType.getSimpleName()) || 'Bson'.equals(paramType.getSimpleName())){
                       sbParams.append("{ }")
                      } else {
                       sbParams.append(paramType.getSimpleName())
                      }
                    }
                    result.add( "${clz.getSimpleName()}|${method.name}(${sbParams})|${method.returnType.getSimpleName()}\\n\\" )
                    //println "${clz.getSimpleName()}|${method.name}(${method.nativeParameterTypes*.getSimpleName().join( ', ' )})|${method.returnType.getSimpleName()}\\n\\"
                  }
                }
                for ( String str : result.unique() ){
                 println str
               }
            }
            listMethodNames( com.dbschema.mongo.JMongoDatabase.class )
            listMethodNames( com.dbschema.mongo.JMongoCollection.class )
            listMethodNames( com.dbschema.mongo.JFindIterable.class )
 */
